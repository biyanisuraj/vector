<%- component = metadata.sources.docker -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%= component_fields(component, heading_depth: 2) -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Docker Integration Strategy

There are two primary ways through which you can integrate with Docker to
receive its logs:

1. Interact with the [Docker daemon][urls.docker_daemon] directly via the
   `docker logs` command. (simplest)
2. Configure a compatible [Docker logging driver][urls.docker_logging_drivers]
   with a matching [Vector source][docs.sources]. (advanced)

The Vector `docker` source implements option 1. This is the simplest option,
but it is prone to performance and stability issues with _large_ deployments. If
you experience this, please see the
[Alternate Strategies section](#alternate-strategies) below.

#### Alternate Strategies

First, it's worth mentioning that Vector strives to guide you towards the
optimal observability setup without presenting you with unncessary details or
questions. Unfortunately, there are circumstances where tradeoffs must be made
and you must determine which tradeoffs are appropriate. Docker is one of these
circumstances.

Second, if you have a large container-based deployment you should consider using
a platform Kubernetes. These platforms provide alternate log collection means
that side-step the Docker logging problems. For supported platforms see Vector's
[Platforms installation section][docs.installation.platforms].

Finally, if you cannot use a container orchestrator then you can configure a
compatible [Docker logging driver][urls.docker_logging_drivers] with a matching
[Vector source][docs.sources]. For example:

1. The [Docker `syslog` driver][urls.docker_logging_driver_syslog] with the
   [Vector `syslog` source][docs.sources.syslog].
2. The [Docker `journald` driver][urls.docker_logging_driver_journald] with the
   [Vector `journald` source][docs.sources.journald].
3. The [Docker `splunk` driver][urls.docker_logging_driver_splunk] with the
   [Vector `splunk_hec` source][docs.sources.splunk_hec].

To our knowledge there is no discernable difference in performance or stability
between any of these. If we had to recommend one, we would recommend the
`syslog` combination.
